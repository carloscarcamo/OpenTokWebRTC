function Room(s,e,t,o,i,n){this.roomId=s,this.apiKey=e,this.session=t,this.token=o,this.Chat=i,this.observable=Rx.Observable,this.Chat=i,this.io=n,this.init()}Room.prototype={constructor:Room,init:function(){var s=this;if(1==OT.checkSystemRequirements()){var e={insertMode:"append",width:"100%",height:"100%"},t=OT.initPublisher(this.apiKey,"publisher",e),o=this.observable.fromEvent(this.session,"sessionConnected"),i=this.observable.fromEvent(this.session,"streamCreated");o.subscribe(function(e){s.session.publish(t)}),i.subscribe(function(t){s.Chat.setPeerConnection(t.stream.connection),swal("A new peer has been connected!"),s.session.subscribe(t.stream,"subscribers",e)}),this.session.connect(this.token),this.addUser(),this.socketEvents()}else swal({title:"Error!",text:"Your browser does not support WebRTC!",type:"error",confirmButtonText:"OK"})},addUser:function(){this.io.emit("add user",this.token)},socketEvents:function(){var s=this.observable.fromEvent(this.io,"login"),e=this.observable.fromEvent(this.io,"user left"),t=this.observable.fromEvent(this.io,"user joined"),o=this.observable.fromEvent(this.io,"full room");s.subscribe(function(s){console.log("active users:",s)}),e.subscribe(function(s){console.log("active users:",s.numUsers)}),t.subscribe(function(s){console.log("A new user has joined")}),o.subscribe(function(s){sweetAlert("Sorry",s,"error"),setTimeout(function(){window.location.href="/"},500)})}};